using AccountAnalyser;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Configuration;
using Microsoft.Win32;

namespace AccountVisualizer
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private ContextMenu cxMenu;
        public List<TransactionInfoViewModel> AllTransactions = new List<TransactionInfoViewModel>();
        public TransactionInfoRepo myRepo;
        private List<string> DefaultHiddenColumns = new List<string>() { "Id","Account" };


        public MainWindow()
        {
            InitializeComponent();

            string defaultCsvPath = Properties.Settings.Default.SourceCsv;

            FillRepo(defaultCsvPath);
            foreach ( var t in myRepo.transactions.Values)
            {
                AllTransactions.Add(new TransactionInfoViewModel(t));
            }

            this.AllTransactionsGrid.ItemsSource = AllTransactions;
            this.AllTransactionsGrid.AutoGeneratedColumns += new EventHandler(OnAutoGeneratedColumns);
            this.AllTransactionsGrid.AutoGeneratingColumn += OnAutoGeneratingColumn;
        }

       
        private void OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyType == typeof(System.DateTime))
                (e.Column as DataGridTextColumn).Binding.StringFormat = "dd/MM/yyyy";
            if (e.PropertyType == typeof(System.DateTime?))
                (e.Column as DataGridTextColumn).Binding.StringFormat = "dd/MM/yyyy";

            e.Column.IsReadOnly = true;
        }

        private void OnAutoGeneratedColumns(object sender, EventArgs e)
        {

           MenuItem menuItem;
            cxMenu = new ContextMenu();
            foreach ( DataGridColumn col in this.AllTransactionsGrid.Columns )
            {
                menuItem = new MenuItem();
                menuItem.Header = col.Header;
                menuItem.IsChecked = true;
                menuItem.Click += new RoutedEventHandler(ColumnMenuItem_Click);
                menuItem.Checked += new RoutedEventHandler(ColumnMenuItem_Checked);
                menuItem.Unchecked += new RoutedEventHandler(ColumnMenuItem_Unchecked);
                
                if (DefaultHiddenColumns.Contains(col.Header))
                {
                    col.Visibility = Visibility.Hidden;
                    menuItem.IsChecked = false;
                }

                cxMenu.Items.Add(menuItem);

                if (col.Header.ToString() == "Date")
                {
                    col.DisplayIndex = 1;
                }
            }
        }

        private void ColumnMenuItem_Unchecked(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            foreach ( DataGridColumn col in this.AllTransactionsGrid.Columns)
            {
                if ( col.Header.ToString().Contains(item.Header.ToString()))
                {
                    col.Visibility = Visibility.Hidden;
                    break;
                }
            }
        }

        private void ColumnMenuItem_Checked(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            foreach (DataGridColumn col in this.AllTransactionsGrid.Columns)
            {
                if (col.Header.ToString().Contains(item.Header.ToString()))
                {
                    col.Visibility = Visibility.Visible;
                    break;
                }
            }
        }

        private void ColumnMenuItem_Click(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            item.IsChecked = !item.IsChecked;
        }

        public void FillRepo (string csvPath)
        {
            // do checking on csvPath 
            if(!File.Exists(csvPath))
            {
                MessageBox.Show($"The file :{csvPath} does not exist! Change your app.config");
                throw new FileNotFoundException();
            }
            
            var handler = new BackupTransactionParser();
            var parser = new CsvParser(',', handler);
            using (StreamReader reader = new StreamReader(csvPath))
            {
                parser.Parse(reader, true);
            }
            myRepo = new TransactionInfoRepo(handler.transactions);
        }

        private void AllTransactionsGrid_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            DependencyObject depObj = (DependencyObject)e.OriginalSource;
            while( (depObj != null) && !(depObj is DataGridColumnHeader))
            {
                depObj = VisualTreeHelper.GetParent(depObj);
            }
            if ( depObj == null)
            {
                return;
            }
            if ( depObj is DataGridColumnHeader)
            {
                var dgColHeader = depObj as DataGridColumnHeader;
                dgColHeader.ContextMenu = cxMenu;
            }
        }

        private void Row_DoubleClick(object sender, MouseButtonEventArgs e)
        {
            DataGridRow row = sender as DataGridRow;
            // Some operations with this row

            var trans = row.Item as TransactionInfoViewModel;
            if ( trans!=null)
            {
                trans.NotSaved = true;
                UpdateTransactionInfo updater = new UpdateTransactionInfo(trans, myRepo.tagKeys);
                updater.ShowDialog();
            }
            this.AllTransactionsGrid.ItemsSource = null;
            this.AllTransactionsGrid.ItemsSource = AllTransactions;

        }

        private void MenuItemAddArgentaCsv_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog().Value)
            {
                var handler = new ArgentaTransactionParser();
                var parser = new CsvParser(';', handler);
                using (StreamReader reader = new StreamReader(openFileDialog.FileName))
                {
                    reader.ReadLine();
                    parser.Parse(reader, true);
                }
                myRepo.MergeTransactions(handler.transactions);

                AllTransactions.Clear();
                foreach (var t in myRepo.transactions.Values)
                {
                    AllTransactions.Add(new TransactionInfoViewModel(t));
                }
                this.AllTransactionsGrid.ItemsSource = null;
                this.AllTransactionsGrid.ItemsSource = AllTransactions;
            }
     
        }

        private void MenuItemSaveAs_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog d = new SaveFileDialog();
            d.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*";
            d.FilterIndex = 1;

            var r = d.ShowDialog();
            if (r!=null && r.Value)
            {
                Save(d.FileName);
            }
        }

        private void MenuItemSave_Click(object sender, RoutedEventArgs e)
        {
            Save(Properties.Settings.Default.SourceCsv);
        }

        private void MenuLoopIncomplete_Click(object sender , RoutedEventArgs e)
        {
            foreach ( var incomplete in AllTransactions.Where(x=>x.IsIncomplete()).OrderBy(x=>x.Date))
            {
                {
                    if (incomplete != null)
                    {
                        incomplete.NotSaved = true;
                        UpdateTransactionInfo updater = new UpdateTransactionInfo(incomplete, myRepo.tagKeys,true);
                        updater.ShowDialog();
                        if (!updater.saveDone)
                            break;
                    }
                }
            }
            this.AllTransactionsGrid.ItemsSource = null;
            this.AllTransactionsGrid.ItemsSource = AllTransactions;
        }

        private void Save(string path)
        {
            foreach (var needToSaveTrans in AllTransactions.Where(x => x.NotSaved))
            {
                needToSaveTrans.NotSaved = false;
                myRepo.Update(needToSaveTrans.info);
            }
    
            BackupTransactionsRepoWriter.WriteToCsv(myRepo, path);
            this.AllTransactionsGrid.ItemsSource = null;
            this.AllTransactionsGrid.ItemsSource = AllTransactions;
        }

        private void SaveShortKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.S && Keyboard.Modifiers == ModifierKeys.Control)
            {
                Save(Properties.Settings.Default.SourceCsv);
                var saveWindow = new ShowSavedWindow(Properties.Settings.Default.SourceCsv);
                saveWindow.Show();
            }
        }

    }

    public class MyValueConverter : IValueConverter
    {
        #region IValueConverter Members

        object IValueConverter.Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            var t = value.GetType();
            var val = value as double?;
            if (val == null)
                return 0;
            if (val.Value > 0)
                return 1;
            else
                return -1;
        }

        object IValueConverter.ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
